"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[790],{5002:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=o(5893),s=o(1151);const r={sidebar_position:2},i="Create your custom models",c={id:"models/create-model",title:"Create your custom models",description:"Each models has a constructor with the object it decorates. WPPost for PostTypeObject, WPTerm for TermObject etc.",source:"@site/docs/models/create-model.md",sourceDirName:"models",slug:"/models/create-model",permalink:"/simply-documentation/models/create-model",draft:!1,unlisted:!1,editUrl:"https://github.com/Amorfx/simply-documentation/tree/main/documentation/docs/models/create-model.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/simply-documentation/models/intro"},next:{title:"Register your model into Simply",permalink:"/simply-documentation/models/register-models"}},l={},d=[{value:"For Post types",id:"for-post-types",level:2},{value:"Post",id:"post",level:3},{value:"Custom Post types",id:"custom-post-types",level:3},{value:"For Taxonomies",id:"for-taxonomies",level:2},{value:"Category",id:"category",level:3},{value:"Tag",id:"tag",level:3},{value:"For Users",id:"for-users",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"create-your-custom-models",children:"Create your custom models"}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["Each models has a constructor with the object it decorates. ",(0,n.jsx)(t.code,{children:"WP_Post"})," for ",(0,n.jsx)(t.code,{children:"PostTypeObject"}),", ",(0,n.jsx)(t.code,{children:"WP_Term"})," for ",(0,n.jsx)(t.code,{children:"TermObject"})," etc."]})}),"\n",(0,n.jsx)(t.h2,{id:"for-post-types",children:"For Post types"}),"\n",(0,n.jsx)(t.h3,{id:"post",children:"Post"}),"\n",(0,n.jsxs)(t.p,{children:["Simply provides you with a basic model for type ",(0,n.jsx)(t.code,{children:"post"})," : ",(0,n.jsx)(t.code,{children:"PostTypeObject"}),". It provides some basic function like ",(0,n.jsx)(t.code,{children:"getTitle"}),", ",(0,n.jsx)(t.code,{children:"getPermalink"})," etc. But you can extends or replace this model with your model if you want. Read ",(0,n.jsx)(t.a,{href:"#register-your-model-into-simply",children:"how register your model"})," to know how to do this."]}),"\n",(0,n.jsx)(t.h3,{id:"custom-post-types",children:"Custom Post types"}),"\n",(0,n.jsxs)(t.p,{children:["After ",(0,n.jsx)(t.a,{href:"/simply-documentation/wp-features/create-post-type",children:"creating your custom post type"})," you will have to create a corresponding model.\nLet's take the example again with project post type.\nMy project post type has multiple metas :"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Project subtitle,"}),"\n",(0,n.jsx)(t.li,{children:"Grid position in my portfolio"}),"\n",(0,n.jsx)(t.li,{children:"A grid size"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"In basic WordPress development you have to write this code into your theme (multiple times or create a dedicated function) :"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"<?php\n\nglobal $post;\n\nif ($post->post_type === 'project') {\n    $size = get_post_meta($post->ID, 'grid_size', true); // or get_field if you use ACF plugin\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"But in your project we want a Project model to do this :"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"<?php\n\nglobal $post;\n\n$project = new Project($post);\n$size = $project->getGridSize();\n"})}),"\n",(0,n.jsx)(t.p,{children:"Let's create our Model :"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",metastring:"title='src/Model/Project.php'",children:"<?php\n\nclass Project {\n    private WP_Post $post;\n    \n    public function __construct(WP_Post $post) {\n        $this->post = $post;\n    }\n    \n    public function getGridSize() {\n        return get_post_meta($this->post->ID, 'grid_size', true);\n    }\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This is a simple class that decorate WP_Post. But here Simply can not reconize which post type the model is related. To do that you have to implement ",(0,n.jsx)(t.code,{children:"ModelInterface"})," with the function ",(0,n.jsx)(t.code,{children:"getType"})," which will return the linked post type."]}),"\n",(0,n.jsx)(t.p,{children:"So let's update our class :"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",metastring:"{16-18} title='src/Model/Project.php'",children:"<?php\n\nuse Simply\\Core\\Contract\\ModelInterface;\n\nclass Project implements ModelInterface {\n    private WP_Post $post;\n    \n    public function __construct(WP_Post $post) {\n        $this->post = $post;\n    }\n    \n    public function getGridSize() {\n        return get_post_meta($this->post->ID, 'grid_size', true);\n    }\n    \n    public static function getType() {\n        return 'project';\n    }\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If you want to have basic function like ",(0,n.jsx)(t.code,{children:"getTitle"})," etc. let's extends ",(0,n.jsx)(t.code,{children:"PostTypeObject"})," :"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",metastring:"{5} title='src/Model/Project.php'",children:"<?php\n\nuse Simply\\Core\\Model\\PostTypeObject;\n\nclass Project extends PostTypeObject {\n    private WP_Post $post;\n    \n    public function __construct(WP_Post $post) {\n        $this->post = $post;\n    }\n    \n    public function getGridSize() {\n        return get_post_meta($this->post->ID, 'grid_size', true);\n    }\n    \n    public static function getType() {\n        return 'project';\n    }\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"for-taxonomies",children:"For Taxonomies"}),"\n",(0,n.jsxs)(t.p,{children:["After ",(0,n.jsx)(t.a,{href:"/simply-documentation/wp-features/create-taxonomy",children:"creating your custom taxonomy"})," its the same thing like Post type but you have to extends the abstract class ",(0,n.jsx)(t.code,{children:"TermObject"})," :"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",metastring:"title='src/Model/ProjectTag.php'",children:"<?php\n\nuse Simply\\Core\\Model\\TermObject;\n\nclass ProjectTag extends TermObject {\n    public static function getType() {\n        return 'project_tag';\n    }\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"category",children:"Category"}),"\n",(0,n.jsxs)(t.p,{children:["Simply provides you with a basic model for ",(0,n.jsx)(t.code,{children:"category"})," : ",(0,n.jsx)(t.code,{children:"CategoryObject"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"tag",children:"Tag"}),"\n",(0,n.jsxs)(t.p,{children:["Simply provides you with a basic model for ",(0,n.jsx)(t.code,{children:"tag"})," : ",(0,n.jsx)(t.code,{children:"TagObject"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"for-users",children:"For Users"}),"\n",(0,n.jsxs)(t.p,{children:["Coming soon. But the basic model registered is ",(0,n.jsx)(t.code,{children:"UserObject"}),";"]})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>c,a:()=>i});var n=o(7294);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);